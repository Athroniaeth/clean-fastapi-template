from typing import Optional, Sequence

from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from template.models.api_keys import ApiKeyModel


class APIKeyRepository:
    """
    Concrete repository for managing ApiKeyModel persistence with SQLAlchemy.

    Attributes:
        _session (AsyncSession): SQLAlchemy session for database operations.
    """

    def __init__(self, session: AsyncSession):
        self._session = session

    async def get(self, id_: int) -> Optional[ApiKeyModel]:
        """
        Retrieve an ApiKeyModel by its integer ID.

        Args:
            id_ (int): primary key of the API key record.

        Returns:
            Optional[ApiKeyModel]: the matching instance, or None if not found.
        """
        stmt = select(ApiKeyModel).where(ApiKeyModel.id == id_)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_name(self, name: str) -> Optional[ApiKeyModel]:
        """
        Retrieve an ApiKeyModel by its name field.

        Args:
            name (str): the human-readable name of the API key.

        Returns:
            Optional[ApiKeyModel]: the matching instance, or None if not found.
        """
        stmt = select(ApiKeyModel).where(ApiKeyModel.name == name)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_hashed_key(self, hashed_key: str) -> Optional[ApiKeyModel]:
        """
        Retrieve an ApiKeyModel by its hashed key value.

        Args:
            hashed_key (str): the bcrypt-hashed API key string.

        Returns:
            Optional[ApiKeyModel]: the matching instance, or None if not found.
        """
        stmt = select(ApiKeyModel).where(ApiKeyModel.hashed_key == hashed_key)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def list_all(self, skip: int = 0, limit: int = 100, active_only: bool = False) -> Sequence[ApiKeyModel]:
        """
        List ApiKeyModel records, with optional pagination and active filtering.

        Args:
            skip (int): number of records to skip (for pagination).
            limit (int): maximum number of records to return.
            active_only (bool): if True, only return records where is_active == True.

        Returns:
            Sequence[ApiKeyModel]: list of ApiKeyModel instances.
        """
        stmt = select(ApiKeyModel)
        if active_only:
            stmt = stmt.where(ApiKeyModel.is_active.is_(True))

        stmt = stmt.offset(skip).limit(limit)
        result = await self._session.execute(stmt)
        return result.scalars().all()

    async def create(self, api_key: ApiKeyModel) -> ApiKeyModel:
        """
        Insert a new ApiKeyModel into the database.

        Args:
            api_key (ApiKeyModel): the new API key instance to persist.

        Returns:
            ApiKeyModel: the persisted instance, with autogenerated fields populated
        """
        # Add to the session and flush so that autogenerated IDs are populated
        self._session.add(api_key)

        await self._session.commit()
        await self._session.flush()
        return api_key

    async def activate(self, api_key: ApiKeyModel) -> None:
        """
        Soft-delete an API key by marking it active.

        Args:
            api_key (ApiKeyModel): the instance to activate.
        """
        api_key.is_active = True
        await self._session.flush()

    async def deactivate(self, api_key: ApiKeyModel) -> None:
        """
        Soft-delete an API key by marking it inactive.

        Args:
            api_key (ApiKeyModel): the instance to deactivate.
        """
        api_key.is_active = False
        await self._session.flush()

    async def update(self, api_key: ApiKeyModel, data: dict) -> bool:
        """
        Update fields of an existing ApiKeyModel.

        Args:
            api_key (ApiKeyModel): the instance to update.
            data (dict): dictionary of fields to modify.

        Returns:
            bool: True if the update was successful, False otherwise.
        """
        stmt = update(ApiKeyModel).where(ApiKeyModel.id == api_key.id).values(**data)
        result = await self._session.execute(stmt)
        await self._session.commit()
        await self._session.flush()
    
        return result.rowcount > 0  # type: ignore

    async def delete(self, api_key: ApiKeyModel) -> bool:
        """
        Permanently remove an ApiKeyModel from the database.

        Args:
            api_key (ApiKeyModel): the instance to remove.
        """
        result = await self._session.delete(api_key)
        await self._session.flush()
        return result.rowcount > 0  # type: ignore
